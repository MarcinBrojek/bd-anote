"""
Django settings for bd_anote project.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'orr=svf(!xp%f$@v!g_pb3t94bi^#3c!kf+n&(=+(4_^!5hqyn'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'anote.apps.AnoteConfig',
    'markdownify',
    'django_tex',
]

MARKDOWNIFY_STRIP = True
MARKDOWNIFY_WHITELIST_TAGS = {
    'a',
    'abbr',
    'acronym',
    'b', 'i',
    'blockquote',
    'em',
    'li', 'ol', 'ul',
    'p',
    'strong',
    'h1', 'h2', 'h3', 'h4', 'h5', 'h6',
    'code',
    'table', 'thead', 'tbody', 'tr', 'th', 'td',
    'br', 'hr', 'sup', 'dt', 'dl', 'dd',
}
MARKDOWNIFY_WHITELIST_ATTRS = [
    'href',
    'src',
    'alt',
]
MARKDOWNIFY_WHITELIST_PROTOCOLS = [
    'http',
    'https',
]
MARKDOWNIFY_WHITELIST_STYLES = [
    'color',
    'font-weight',
]
MARKDOWNIFY_LINKIFY_SKIP_TAGS = ['pre', 'code', ]
MARKDOWNIFY_MARKDOWN_EXTENSIONS = ['markdown.extensions.extra',
                                   'markdown.extensions.abbr',
                                   'markdown.extensions.attr_list',
                                   'markdown.extensions.def_list',
                                   'markdown.extensions.fenced_code',
                                   'markdown.extensions.footnotes',
                                   'markdown.extensions.md_in_html',
                                   'markdown.extensions.tables',
                                   'markdown.extensions.admonition',
                                   'markdown.extensions.codehilite',
                                   'markdown.extensions.legacy_attrs',
                                   'markdown.extensions.legacy_em',
                                   'markdown.extensions.meta',
                                   'markdown.extensions.nl2br',
                                   'markdown.extensions.sane_lists',
                                   'markdown.extensions.smarty',
                                   'markdown.extensions.toc',
                                   'markdown.extensions.wikilinks']

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

SESSION_ENGINE = 'django.contrib.sessions.backends.signed_cookies'

ROOT_URLCONF = 'bd_anote.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
    {
        'NAME': 'tex',
        'BACKEND': 'django_tex.engine.TeXEngine',
        'APP_DIRS': True,
        'DIRS': []
    }
]

WSGI_APPLICATION = 'bd_anote.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

# Email setup
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Email setup - commented real case

# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_USE_TLS = True
# EMAIL_PORT = 587
# EMAIL_HOST_USER = '' # <- you can add real data
# EMAIL_HOST_PASSWORD = '' # <- here also
